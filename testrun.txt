bash: usr/share/doc/bash-doc/examples: No such file or directory
(base) ian@ian-Latitude-E7440:~$ nano hessenberg.f
(base) ian@ian-Latitude-E7440:~$ gfortran hessenberg.f -o hessenberg
(base) ian@ian-Latitude-E7440:~$ ./hessenberg
 Hessenberg form of the matrix:
   1.0000000000000000     
   5.0000000000000000     
   9.0000000000000000     
   13.000000000000000     

   2.0000000000000000     
   6.0000000000000000     
   10.000000000000000     
   14.000000000000000     

   3.0000000000000000     
   7.0000000000000000     
   11.000000000000000     
   15.000000000000000     

   4.0000000000000000     
   8.0000000000000000     
   12.000000000000000     
   16.000000000000000     

(base) ian@ian-Latitude-E7440:~$ cat hessenberg.f
      PROGRAM Hessenberg
      IMPLICIT NONE

      INTEGER, PARAMETER :: n = 4
      DOUBLE PRECISION A(n, n)
      INTEGER i, j

      ! Initialize matrix A with your values
      DATA A / 1.0, 2.0, 3.0, 4.0, 
     &          5.0, 6.0, 7.0, 8.0, 
     &          9.0, 10.0, 11.0, 12.0, 
     &          13.0, 14.0, 15.0, 16.0 /

      CALL HessenbergTransform(A, n)

      PRINT *, 'Hessenberg form of the matrix:'
      DO i = 1, n
         DO j = 1, n
            PRINT *, A(i, j)
         END DO
         PRINT *
      END DO

      END

      SUBROUTINE HessenbergTransform(A, n)
      IMPLICIT NONE
      DOUBLE PRECISION A(n, n)
      INTEGER n
      INTEGER i, j, k
      DOUBLE PRECISION alpha, s, u(n)

      ! Apply the Householder transformation or similar algorithm
      ! This part needs to be implemented

      RETURN
      END SUBROUTINE HessenbergTransform
(base) ian@ian-Latitude-E7440:~$ sloccount hessenberg.f
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/hessenberg.f to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
26      top_dir         fortran=26


Totals grouped by language (dominant language first):
fortran:         26 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 26
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.05)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.07 (0.81)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.06
Total Estimated Cost to Develop                           = $ 585
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ gfortran hessenberg.f -S
(base) ian@ian-Latitude-E7440:~$ gfortran hessenberg.s -o hessenbergs
(base) ian@ian-Latitude-E7440:~$ ./hessenbergs
 Hessenberg form of the matrix:
   1.0000000000000000     
   5.0000000000000000     
   9.0000000000000000     
   13.000000000000000     

   2.0000000000000000     
   6.0000000000000000     
   10.000000000000000     
   14.000000000000000     

   3.0000000000000000     
   7.0000000000000000     
   11.000000000000000     
   15.000000000000000     

   4.0000000000000000     
   8.0000000000000000     
   12.000000000000000     
   16.000000000000000     

(base) ian@ian-Latitude-E7440:~$ sloccount hessenberg.s
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/hessenberg.s to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
209     top_dir         asm=209


Totals grouped by language (dominant language first):
asm:            209 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 209
Development Effort Estimate, Person-Years (Person-Months) = 0.04 (0.46)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.16 (1.87)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.25
Total Estimated Cost to Develop                           = $ 5,221
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~$ ccat hessenberg.s
Command 'ccat' not found, but can be installed with:
sudo apt install ccrypt
(base) ian@ian-Latitude-E7440:~$ cat hessenberg.s
	.file	"hessenberg.f"
	.text
	.globl	hessenbergtransform_
	.type	hessenbergtransform_, @function
hessenbergtransform_:
.LFB0:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	hessenbergtransform_, .-hessenbergtransform_
	.section	.rodata
	.align 4
.LC0:
	.long	4
.LC1:
	.string	"hessenberg.f"
.LC2:
	.ascii	"Hessenberg form of the matrix:"
	.text
	.type	MAIN__, @function
MAIN__:
.LFB1:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$544, %rsp
	leaq	.LC0(%rip), %rax
	movq	%rax, %rsi
	leaq	a.1(%rip), %rax
	movq	%rax, %rdi
	call	hessenbergtransform_
	leaq	.LC1(%rip), %rax
	movq	%rax, -536(%rbp)
	movl	$16, -528(%rbp)
	movl	$128, -544(%rbp)
	movl	$6, -540(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-544(%rbp), %rax
	movl	$30, %edx
	leaq	.LC2(%rip), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-544(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	$1, -4(%rbp)
.L7:
	cmpl	$4, -4(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L8
	movl	$1, -8(%rbp)
.L6:
	cmpl	$4, -8(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L9
	leaq	.LC1(%rip), %rax
	movq	%rax, -536(%rbp)
	movl	$19, -528(%rbp)
	movl	$128, -544(%rbp)
	movl	$6, -540(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	movl	-8(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rdx, %rax
	subq	$5, %rax
	leaq	0(,%rax,8), %rdx
	leaq	a.1(%rip), %rax
	leaq	(%rdx,%rax), %rcx
	leaq	-544(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_real_write@PLT
	leaq	-544(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	addl	$1, -8(%rbp)
	jmp	.L6
.L9:
	nop
	leaq	.LC1(%rip), %rax
	movq	%rax, -536(%rbp)
	movl	$21, -528(%rbp)
	movl	$128, -544(%rbp)
	movl	$6, -540(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-544(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	addl	$1, -4(%rbp)
	jmp	.L7
.L8:
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	MAIN__, .-MAIN__
	.globl	main
	.type	main, @function
main:
.LFB2:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movl	-4(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	_gfortran_set_args@PLT
	leaq	options.3.0(%rip), %rax
	movq	%rax, %rsi
	movl	$7, %edi
	call	_gfortran_set_options@PLT
	call	MAIN__
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	main, .-main
	.data
	.align 32
	.type	a.1, @object
	.size	a.1, 128
a.1:
	.long	0
	.long	1072693248
	.long	0
	.long	1073741824
	.long	0
	.long	1074266112
	.long	0
	.long	1074790400
	.long	0
	.long	1075052544
	.long	0
	.long	1075314688
	.long	0
	.long	1075576832
	.long	0
	.long	1075838976
	.long	0
	.long	1075970048
	.long	0
	.long	1076101120
	.long	0
	.long	1076232192
	.long	0
	.long	1076363264
	.long	0
	.long	1076494336
	.long	0
	.long	1076625408
	.long	0
	.long	1076756480
	.long	0
	.long	1076887552
	.section	.rodata
	.align 16
	.type	options.3.0, @object
	.size	options.3.0, 28
options.3.0:
	.long	2116
	.long	4095
	.long	0
	.long	1
	.long	1
	.long	0
	.long	31
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
(base) ian@ian-Latitude-E7440:~$ 
